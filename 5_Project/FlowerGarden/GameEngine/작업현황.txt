------------------------------

2023.07.21
TimeManager 추가

QueryPerformence 함수 관련해서 공부했다.

------------------------------

------------------------------

2023.07.24
InputManager 구현 시작

가상키를 그대로 사용 or 내가 enum을 다시 정의 중 고민했는데 가상 키를 그대로 사용하는 것도 괜찮지 않을까 해서
map이나 set 같은 자료구조를 사용하지 않고 그냥 배열로 정의 하기로 했다. 가상키는 0xFE (Dec 254) 까지 존재한다.

대부분의 매니저들은 Init과 Update가 있을 것 같은데 이걸 부모 Manager Class를 만드는 게 맞을까? 
모르겠다. 함수 두 개라 일단 안만든다. 필요하다 싶으면 그때 만들어야지

------------------------------

------------------------------

2023.07.25
InputManager와 SoundManager에 싱글톤 디자인 패턴을 적용하기로 했다.

일단 template으로 구현해야 코드를 재활용하기 좋을 것 같다.
힙에 잡는다. 우리 프로젝트에서 꼭 힙에 잡아야 하는 지는 잘 모르겠지만 힙에 잡는다.

싱글톤을 만들었는데 이건 무조건 상속을 받아서 쓰는 클래스이다. 
템플릿 클래스의 포인터로 자식을 가리킬일은 없으니까 virtual 소멸자는 
필요없는 게 맞다.

하지만 명시적으로 instance는 삭제를 해줘야 하니까 함수가 필요할 것 같다.

instance 변수를 초기화할 때 Alt+C를 눌렀더니 __declspec(selectany)가 
자동으로 생겼다. 무슨 의민지 모르니까 공부해야된다.

싱글톤으로 만들었더니 생성자를 private으로 숨기려면 friend class 를 사용해야 한다. (다른 방법이 있나?)
이게 좋은 방법이 맞을까?

검색해보기로 했다.
https://tear94fall.github.io/lecture/2020/11/16/singletone-design-pattern.html
피닉스 싱글톤, 모던 C++을 이용한 std::call_once() + smart pointer 싱글톤이 있는 것 같다.
나중에 공부해 봐야겠다.

------------------------------

------------------------------

2023.07.25
ResourceManager 구현 시작

데이터 저장을 json으로 할까 했는데 지금은 json이 필요한 지 잘 모르겠다.

Scene에 들어갈 Resource를 관리하는 툴을 만들기로 했다.
Scene 이름과 Scene에 들어갈 오브젝트를 저장하는 txt파일 이름은 같게 만든다.
GameScene -> GameScene.txt

오브젝트 식별자와 오브젝트 파일이름도 같게 만든다.
object.png -> "object"

일단은 비트맵과 사운드 생각 중

Load Image랑 Load Sound를 분리하려고 했는데
어차피 파일을 한 번 순회해야 해서 분리하지 말고 한 번에 하기로 했는데 
지금 생각해보니 파일 확장자만 검사해서 함수를 만들어서 분리해도 될 거 같다.

SoundManager는 완성이 안되어서 일단 비트맵만 작업한다.

------------------------------

------------------------------

2023.07.27

/// GameObject에 필요한 것들을 생각해보자

// Transform 전부 필요함, Sprite 전부 붙여도 될 거 같음, 
// Animator, Collider, Sound

// 다양한 방법을 생각할 수 있다.
// 1. 모든 속성의 포인터를 가지고 있는다.
// 2. 다중 상속을 이용한다.
// 3. Icomponent 인터페이스를 만들고 부모의 포인터로 자식들을 가지고 있다.
//	  enum class 를 가지고 있어야 한다.

다중 상속을 한다면 가상상속을 해야하나?
속성들 사이에 종속성은 없을까?
collision도 Update가 있고 Animator도 Update가 있다.
collision이 업데이트가 되고 Animator가 그 다음에 업데이트 되는 게 맞지 않을까?

Element 요소 
Property 속성
Attribute 속성

------------------------------

------------------------------

2023.07.28

간단한 테스트를 해 본 결과 다운캐스팅을 이용한 
방식은 팀원들이 힘들어 하는 거 같아서
그냥 낭비가 좀 있더라도 enum을 인덱스로 사용해서 구분하고 모든 element
포인터를 다 가지고 있기로 했다. 
먼저 업데이트 해야하는 걸 앞 쪽 인덱스로 두면 되겠지?

SceneManager 구현을 시작했다.

------------------------------

------------------------------

2023.07.31

DemoEngine EntryPoint를 클래스로 묶어서 정리했다.

Resource Manager를 만들고 있다.

------------------------------